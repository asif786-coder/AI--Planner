import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { ArrowLeft, MapPin, Calendar, Users, DollarSign, Heart, Download, Share } from 'lucide-react';
import { useToast } from '@/hooks/use-toast';

interface Itinerary {
  id: string;
  destination: string;
  start_date: string;
  end_date: string;
  num_travelers: number;
  budget: string;
  interests: string[];
  content: any;
  created_at: string;
}

interface ItineraryViewProps {
  itinerary: Itinerary;
  onBack: () => void;
}

const ItineraryView = ({ itinerary, onBack }: ItineraryViewProps) => {
  const { toast } = useToast();

  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleDateString('en-US', {
      year: 'numeric',
      month: 'long',
      day: 'numeric'
    });
  };

  const handleShare = async () => {
    if (navigator.share) {
      try {
        await navigator.share({
          title: `My ${itinerary.destination} Travel Itinerary`,
          text: `Check out my AI-generated travel itinerary for ${itinerary.destination}!`,
        });
      } catch (error) {
        // User cancelled sharing
      }
    } else {
      // Fallback to copying to clipboard
      const shareText = `My ${itinerary.destination} Travel Itinerary\n\nGenerated by TravelAI\n\n${itinerary.content?.generated_text || 'Generated itinerary content'}`;
      await navigator.clipboard.writeText(shareText);
      toast({
        title: "Copied to clipboard",
        description: "Itinerary copied to clipboard for sharing",
      });
    }
  };

  const handleDownload = () => {
    const content = `${itinerary.destination} Travel Itinerary
Generated on ${formatDate(itinerary.created_at)}

Trip Details:
- Destination: ${itinerary.destination}
- Dates: ${formatDate(itinerary.start_date)} - ${formatDate(itinerary.end_date)}
- Travelers: ${itinerary.num_travelers}
- Budget: ${itinerary.budget}
- Interests: ${itinerary.interests.join(', ')}

Itinerary:
${itinerary.content?.generated_text || 'No content available'}

Generated by TravelAI - Your AI Travel Companion`;

    const blob = new Blob([content], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `${itinerary.destination.replace(/[^a-z0-9]/gi, '_').toLowerCase()}_itinerary.txt`;
    a.click();
    URL.revokeObjectURL(url);
    
    toast({
      title: "Download started",
      description: "Your itinerary is being downloaded",
    });
  };

  return (
    <div className="min-h-screen bg-background">
      {/* Header */}
      <header className="border-b bg-card shadow-card">
        <div className="container mx-auto px-4 py-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-4">
              <Button variant="ghost" size="sm" onClick={onBack}>
                <ArrowLeft className="h-4 w-4 mr-2" />
                Back to Dashboard
              </Button>
              <div className="flex items-center gap-3">
                <MapPin className="h-6 w-6 text-primary" />
                <div>
                  <h1 className="text-xl font-bold text-foreground">{itinerary.destination}</h1>
                  <p className="text-sm text-muted-foreground">Travel Itinerary</p>
                </div>
              </div>
            </div>
            <div className="flex items-center gap-2">
              <Button variant="outline" size="sm" onClick={handleShare}>
                <Share className="h-4 w-4 mr-2" />
                Share
              </Button>
              <Button variant="outline" size="sm" onClick={handleDownload}>
                <Download className="h-4 w-4 mr-2" />
                Download
              </Button>
            </div>
          </div>
        </div>
      </header>

      <main className="container mx-auto px-4 py-8 max-w-4xl">
        {/* Trip Overview */}
        <Card className="mb-8 shadow-card">
          <CardHeader>
            <CardTitle className="flex items-center gap-2 text-foreground">
              <MapPin className="h-6 w-6 text-primary" />
              Trip Overview
            </CardTitle>
            <CardDescription>
              Generated on {formatDate(itinerary.created_at)}
            </CardDescription>
          </CardHeader>
          <CardContent>
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
              <div className="flex items-center gap-3">
                <Calendar className="h-5 w-5 text-primary" />
                <div>
                  <p className="text-sm text-muted-foreground">Travel Dates</p>
                  <p className="font-medium">{formatDate(itinerary.start_date)}</p>
                  <p className="font-medium">to {formatDate(itinerary.end_date)}</p>
                </div>
              </div>
              <div className="flex items-center gap-3">
                <Users className="h-5 w-5 text-primary" />
                <div>
                  <p className="text-sm text-muted-foreground">Travelers</p>
                  <p className="font-medium">{itinerary.num_travelers} {itinerary.num_travelers > 1 ? 'people' : 'person'}</p>
                </div>
              </div>
              <div className="flex items-center gap-3">
                <DollarSign className="h-5 w-5 text-primary" />
                <div>
                  <p className="text-sm text-muted-foreground">Budget</p>
                  <p className="font-medium">{itinerary.budget}</p>
                </div>
              </div>
              <div className="flex items-center gap-3">
                <Heart className="h-5 w-5 text-primary" />
                <div>
                  <p className="text-sm text-muted-foreground">Interests</p>
                  <p className="font-medium">{itinerary.interests.length} selected</p>
                </div>
              </div>
            </div>
            
            {/* Interests Tags */}
            <div className="mt-6">
              <p className="text-sm font-medium text-foreground mb-2">Your Interests:</p>
              <div className="flex flex-wrap gap-2">
                {itinerary.interests.map((interest, index) => (
                  <span 
                    key={index}
                    className="px-3 py-1 bg-primary/10 text-primary text-sm rounded-full border border-primary/20"
                  >
                    {interest}
                  </span>
                ))}
              </div>
            </div>
          </CardContent>
        </Card>

        {/* Generated Itinerary */}
        <Card className="shadow-card">
          <CardHeader>
            <CardTitle className="text-foreground">Your Personalized Itinerary</CardTitle>
            <CardDescription>
              AI-generated based on your preferences and interests
            </CardDescription>
          </CardHeader>
          <CardContent>
            <div className="prose prose-slate max-w-none">
              {itinerary.content?.generated_text ? (
                <div className="whitespace-pre-wrap text-foreground leading-relaxed">
                  {itinerary.content.generated_text}
                </div>
              ) : (
                <div className="text-center py-8">
                  <p className="text-muted-foreground">No itinerary content available.</p>
                </div>
              )}
            </div>
          </CardContent>
        </Card>

        {/* Action Buttons */}
        <div className="mt-8 flex justify-center gap-4">
          <Button variant="outline" onClick={onBack}>
            Back to Dashboard
          </Button>
          <Button variant="travel" onClick={handleShare}>
            <Share className="h-4 w-4 mr-2" />
            Share This Trip
          </Button>
        </div>
      </main>
    </div>
  );
};

export default ItineraryView;